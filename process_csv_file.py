# coding=utf-8
import re
import os
import csv

class CSVParser():

    # Define constants for csv file
    QUOTING = csv.QUOTE_MINIMAL  # Controls when quotes should be generated by the writer and recognised by the reader
    LINE_TERMINATOR = '\r\n'  # The string used to terminate lines produced by the writer

    # Define variables
    _filename = None
    _input_path = ''    # input file path
    _output_path = ''   # output file path
    _delimiter = ','    # csv delimiter

    #define line variables
    _url = ''
    _title = ''
    _product = ''
    _pirates = ''
    _bad_domain = ''

    """ Constructor"""

    def __init__(self, filename=None, input_path='', output_path='', delimiter = ','):
        self._filename = filename
        self._input_path = input_path
        self._output_path = output_path
        self._delimiter = delimiter

    """ Parse line """

    def save_line_info(self, line):
        self._url = self.strip_non_alphanumeric_characters(line[0].upper())
        self._title = self.strip_non_alphanumeric_characters(line[1].upper())
        self._product = self.strip_non_alphanumeric_characters(line[4].upper())
        self._pirates = self.strip_non_alphanumeric_characters(line[5].upper())
        self._bad_domain = self.strip_non_alphanumeric_characters(line[6].upper())

    """ Strip non alphanumeric characters from URL and title"""


    def strip_non_alphanumeric_characters(self, line):
        return re.sub(r'\W+', '', line)


    """ Locate presence of product name in title or url (from strings)"""


    def is_locate_product(self):

        if ((self._product in self._url) or (self._product in self._title)):
            return True
        else:
            return False


    """ Check URL domain against bad domain list"""


    def is_in_bad_domain_list(self):
        if self._bad_domain in self._url:
            return True
        else:
            if self._bad_domain in self._title:
                return True
            else:
                return False


    """ Locate presence of any known pirate word in title or URL """


    def is_any_pirate_word(self):
        if self._pirates in self._url:
            return True
        else:
            if self._pirates in self._title:
                return True
            else:
                return False


    """Update result field"""


    def update_result_field(self, line):
        # save parameters
        self.save_line_info(line)

        # Not present: Mark result as Undecided – No name match
        if not self.is_locate_product():
            return 'Undecided – No name match'

        # Check URL domain against bad domain list
        if self.is_in_bad_domain_list():
            return 'Infringing – bad domain'

        # Locate presence of any known pirate word in title or URL
        if self.is_any_pirate_word():
            return 'Infringing – pirate keyword'

        # Not present: Mark result as  Undecided – No keyword match
        return 'Undecided – No keyword match'


    """ Process csv file"""


    def prosecc_csv_file(self):
        # list of rows
        rows = []

        # read input csv file
        with open(self._input_path + self._filename, mode='rb') as infile:
            reader = csv.reader(infile, delimiter=self._delimiter, quoting=self.QUOTING, skipinitialspace=True)
            header = next(reader)  # skip and save header
            # parse line in file
            for row in reader:
                #update result
                row[2] = self.update_result_field(row)
                rows.append(row)

        # create updated version of file
        with open(self._output_path + self._filename, 'wb') as outfile:
            writer = csv.writer(outfile, delimiter=self._delimiter, quoting=self.QUOTING, lineterminator=self.LINE_TERMINATOR)
            writer.writerow(header)
            writer.writerows(rows)

        print "..processed rows: " + str(len(rows))

        # delete backed-up original
        if (self._input_path != self._output_path):
            os.remove(self._input_path + self._filename)

######################################################################################
######################################################################################
#create class instance
csv_file = CSVParser('input_csv.csv')
#parse file
csv_file.prosecc_csv_file()
print "Done"
######################################################################################